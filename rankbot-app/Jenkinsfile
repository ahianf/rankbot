#!/usr/bin/env groovy

def tagImagen = "local/rankbot:0.9.0"
def ipServidor = "ubuntu@141.148.185.27"
pipeline {

    agent any
    stages {

        stage('Build aplicaci√≥n') {
            steps {
                script {
                    sh "docker buildx build --platform linux/amd64 --target build -t ${tagImagen} ./rankbot-app"
                }
            }
        }
        stage('Generar imagen') {
            steps {
                script {
                    sh "docker buildx build --platform linux/arm64 --target final -t ${tagImagen} ./rankbot-app"
                }
            }
        }
        stage('Guardar imagen') {
            steps {
                // Save the Docker image as a tarball
                sh "docker save -o rankbot-0.9.0.tar.gz ${tagImagen}"
            }
        }
        stage('Copiar imagen a servidor remoto') {
            steps {
                // Start an SSH agent and add the private key associated with your SSH credentials
                sshagent(credentials: ['0e7f6e3a-8c8e-49c7-ba2b-9fba8e4cfdcc']) {
                    // Use scp to copy the local Docker image tarball to the remote server
                    sh "scp -o StrictHostKeyChecking=no rankbot-0.9.0.tar.gz ${ipServidor}:/home/ubuntu"
                }
            }
        }

        stage('Desplegar a prod') {
            steps {
                script {
                    sshagent(credentials : ['0e7f6e3a-8c8e-49c7-ba2b-9fba8e4cfdcc']) {
                        sh "ssh -o StrictHostKeyChecking=no ${ipServidor} 'docker load -i /home/ubuntu/rankbot-0.9.0.tar.gz'"
                        sh "ssh -o StrictHostKeyChecking=no ${ipServidor} 'docker stop rankbot || true'"
                        sh "ssh -o StrictHostKeyChecking=no ${ipServidor} 'docker rm rankbot || true'"
                        sh "ssh -o StrictHostKeyChecking=no ${ipServidor} 'docker run -d --name rankbot --restart unless-stopped --network rankbot_default -v \"/etc/localtime:/etc/localtime:ro\" -v \"/etc/timezone:/etc/timezone:ro\" ${tagImagen}'"
                    }
                }
            }
        }

        stage('Limpieza') {
            steps{
                sh "docker rmi ${tagImagen}"
            }
        }
    }
}